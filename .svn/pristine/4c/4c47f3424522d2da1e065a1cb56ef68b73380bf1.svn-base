//
//  CheckUpViewController.m
//  B-iSolar
//
//  Created by Mark.zheng on 2020/6/16.
//  Copyright © 2020 Mark.zheng. All rights reserved.
//

#import "CheckUpViewController.h"

#import "MonitorDetailTableViewCell.h"
#import "HomeTableHeaderView.h"
#import "ReportDetailChartsCell.h"
#import "HomeTableViewCompleteCell.h"
#import "CheckUpCompleteCell.h"
#import "SelectStationHeaderView.h"
#import "CheckWorkTableViewCell.h"
#import "CheckUpDetailViewController.h"
#import "BaseTableViewController.h"
#import "Select3StationHeaderView.h"
#import "CheckTableViewCell.h"
#import "FileDetailViewController.h"
#import "CheckUpDeatailViewController.h"



@interface CheckUpViewController ()
{
    NSDictionary *currentMonitor;
    IBOutlet NSLayoutConstraint *topCon;
    IBOutlet NSLayoutConstraint *tableTopCon;
    
    NSMutableArray *allMonitorArr;
    
    SelectStationHeaderView *headView;
    Select3StationHeaderView *checkHeadView;
    UIBarButtonItem *checkRightBtn;
    
    BOOL isMannual;
    NSMutableArray * areaArr;
    NSDictionary *currentArea, *currentStation;
    NSString*currentDate;
    NSInteger currentIndex;
}
@property(nonatomic,strong) NSMutableArray *allMonitorArr;
@end

@implementation CheckUpViewController
@synthesize sepView;
@synthesize mainTableV;
@synthesize allMonitorArr;
@synthesize pickerV;
- (void)viewDidLoad {
    [super viewDidLoad];

    self.pickerV = [[CustomPicker alloc] init];
    self.pickerV.backgroundColor = UIColorFromHex(0xf0f0f0);
    self.pickerV.delegate = self;
    weak_self(ws)

    NSString *title = @"当前电站";
    
    headView = [[SelectStationHeaderView alloc] initWithTitle:title andButtonClick:^(id x) {
        [ws chooseStation];
        
    }];
    
    checkHeadView = [[Select3StationHeaderView alloc] initWithTitle:@[@"地区",@"公司名称",@"巡检时间"] andButtonClick:^(id x) {
        [ws headCheckClick:[x intValue]];
    }];
    
    
    //    topCon.constant = 64;
//    tableTopCon.constant = -64;
    [mainTableV registerNib:[UINib nibWithNibName:@"CheckUpCompleteCell" bundle:nil] forCellReuseIdentifier:@"CheckUpCompleteCell"];
    [mainTableV registerNib:[UINib nibWithNibName:@"CheckWorkTableViewCell" bundle:nil] forCellReuseIdentifier:@"CheckWorkTableViewCell"];
    [mainTableV registerNib:[UINib nibWithNibName:@"CheckTableViewCell" bundle:nil] forCellReuseIdentifier:@"CheckTableViewCell"];
    
    [monthBtn setTitle:String(@"巡视检查") forState:UIControlStateNormal];
    [checkBtn setTitle:String(@"电站巡检") forState:UIControlStateNormal];
    
    self.title = String(@"工作");
    checkRightBtn = [[UIBarButtonItem alloc] initWithTitle:@"上传" style:UIBarButtonItemStylePlain target:self action:@selector(newCheck)];
    self.navigationItem.rightBarButtonItem = nil;
   
    
    sepView.frame = CGRectMake(0, 40, MAINSCREENWIDTH/2, 4);
    sepView.backgroundColor = MAIN_TINIT_COLOR;
    currentSelect = 0;
    [monthBtn setTitleColor:MAIN_TINIT_COLOR forState:UIControlStateNormal];
    [checkBtn setTitleColor:COLOR_TABLE_TITLE forState:UIControlStateNormal];

    mainTableV.backgroundColor = [UIColor clearColor];
    self.mainTableV.mj_header = [MJRefreshNormalHeader headerWithRefreshingBlock:^{
        if(isMannual)
        {
            currentArea = nil;
            currentDate = nil;
            currentStation = nil;
        }
        isMannual  = YES;
        currentIndex = 0;
        [ws.mainTableV.mj_footer resetNoMoreData];
        [ws getData:nil];
    }];
    
    
    self.mainTableV.mj_footer = [MJRefreshBackNormalFooter footerWithRefreshingBlock:^{
        
        [ws getData:nil];
    }];
    
    [self.mainTableV.mj_header beginRefreshing];
}


- (void)headCheckClick:(int)index
{
    if(index == 2)
    {
        [self.pickerV setType:PickerTypeYYYYMM andTag:2 andDatas:areaArr];
        [pickerV setCurrentY:[NSDate year] M:[NSDate month] D:[NSDate day]];
        self.pickerV.hiddenCustomPicker = NO;
        return;
    }
    weak_self(ws);
    
    NSMutableDictionary *parmDic = [[NSMutableDictionary alloc] init];
    requestHelper.needShowHud =@1;
    [requestHelper startRequest:parmDic uri:API_ExternalStationApi result:^(BResponseModel * _Nonnull respModel) {
        if (respModel.success) {
            areaArr = [[NSMutableArray alloc] init];
            if (index==0)
            {
                for (NSDictionary * dic in respModel.data) {
                    if([dic[@"pId"] intValue]==0)
                    {
                        [areaArr addObject:dic];
                    }
                }
                [ws.pickerV setType:PickerTypeOne andTag:0 andDatas:areaArr];
                self.pickerV.hiddenCustomPicker = NO;
            }else{
                for (NSDictionary * dic in respModel.data) {
                    if([dic[@"pId"] intValue]==0)
                    {
                        [areaArr addObject:dic];
                    }
                }
                
                for (int i =0; i< areaArr.count;i++) {
                    NSMutableDictionary *dic = [[NSMutableDictionary alloc] initWithDictionary:areaArr[i]];
                    NSMutableArray * tmpArr = [NSMutableArray array];
                    for (NSDictionary * tmpDic in respModel.data) {
                        if( [tmpDic[@"areaId"] intValue] == -2 &&  [tmpDic[@"pId"] intValue]==[dic[@"id"] intValue])
                        {
                            [tmpArr addObject:tmpDic];
                        }
                    }
                    dic[@"list"] = tmpArr;
                    areaArr[i] = dic;
                }
                
                [ws.pickerV setType:PickerTypeTwo andTag:1 andDatas:areaArr];
                self.pickerV.hiddenCustomPicker = NO;
            }
        }else{
            [SVProgressHUD showErrorWithStatus:respModel.errorMessage?respModel.errorMessage:respModel.message];
        }
    }];
    
    
    
    
    
}



- (void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
    if (!self.mainTableV.mj_header.isRefreshing) {
        [self.mainTableV.mj_header beginRefreshing];
    }
}

- (void)newCheck{
    CheckUpDeatailViewController*vc = [[CheckUpDeatailViewController alloc] initWithData:nil andEdit:YES];
    PUSHNAVICONTROLLER(vc);
}

- (void)chooseStation{
    
    NSMutableArray *stationArray = [[NSMutableArray alloc] init];
    [stationArray addObject:@{@"name":@"全部电站", @"id":@"0"}];
    [stationArray addObjectsFromArray:self.dataModel.data[@"station_list"]];
    [self.pickerV setType:PickerTypeOne andTag:100 andDatas:stationArray];
    self.pickerV.hiddenCustomPicker = NO;
}

- (IBAction)sepBtnClick:(UIButton *)sender {
    weak_self(ws);
    [sender setTitleColor:MAIN_TINIT_COLOR forState:UIControlStateNormal];

    if (sender == monthBtn) {
        self.navigationItem.rightBarButtonItem = nil;

        currentSelect =0;
        [checkBtn setTitleColor:COLOR_TABLE_TITLE forState:UIControlStateNormal];

        [UIView animateWithDuration:.5 animations:^{
            ws.sepView.frame = CGRectMake(0, 40, MAINSCREENWIDTH/2, 4);
        }];
    }else{
        self.navigationItem.rightBarButtonItem = checkRightBtn;

        
        [monthBtn setTitleColor:COLOR_TABLE_TITLE forState:UIControlStateNormal];
        dataModel = nil;
        currentSelect =2;
        [UIView animateWithDuration:.5 animations:^{
            ws.sepView.frame = CGRectMake(MAINSCREENWIDTH/2, 40, MAINSCREENWIDTH/2, 4);
        }];
    }
    
    if ([mainTableV.mj_header isRefreshing]) {
        [self getData:nil];
    }else{
        [mainTableV.mj_header beginRefreshing];
    }
}


- (void)getData:(id)obj{
    
    if ([BAPIHelper getToken].length==0) {
        return;
    }
    
    weak_self(ws);
    [requestHelper stop];
    
    if(currentSelect==2){
        NSMutableDictionary *parmDic = [[NSMutableDictionary alloc] init];

        if(currentDate)
            parmDic[@"inspectionDate"] = currentDate;
        if (currentArea) {
            parmDic[@"area"] = currentArea[@"areaId"];
        }
        if (currentStation) {
            parmDic[@"name"] = currentStation[@"id"];
        }
        parmDic[@"pageindex"] = @(currentIndex);
        
        requestHelper.needShowHud =@0;
        [requestHelper startRequest:parmDic uri:API_ExternalApi result:^(BResponseModel * _Nonnull respModel) {
            if (respModel.success) {
                currentIndex = currentIndex + 1;
                
                [checkHeadView setTitle0:currentArea?currentArea[@"name"]:@"地区"
                                  title1:currentStation?currentStation[@"name"]:@"公司"
                                  title2:parmDic[@"inspectionDate"]?parmDic[@"inspectionDate"]:@"巡检时间"];
                
                if([ws.mainTableV.header isRefreshing])
                {
                  
                    
                    ws.dataModel = respModel;
                    ws.allMonitorArr = [[NSMutableArray alloc] initWithArray:ws.dataModel.data[@"list"]];
                }else{
                    
                    ws.dataModel = respModel;
                    if([ws.dataModel.data[@"list"] count] == 0)
                    {
                        [ws.mainTableV.mj_footer endRefreshingWithNoMoreData];
//                        [ws.mainTableV.mj_footer endRefreshing];
                        [ws.mainTableV reloadData];
                        return;
                    }else{
                        [ws.allMonitorArr addObjectsFromArray:ws.dataModel.data[@"list"]];
                    }
//                    ws.allMonitorArr =     [[NSMutableArray alloc] initWithArray:];
                    
                }
            }else{
                currentIndex = currentIndex -1;
                if(currentIndex == 0){
                    currentIndex = 1;
                }
                [SVProgressHUD showErrorWithStatus:respModel.errorMessage?respModel.errorMessage:respModel.message];
            }
            if([ws.mainTableV.mj_header isRefreshing])
                [ws.mainTableV.mj_header endRefreshing];
            if([ws.mainTableV.mj_footer isRefreshing])
                [ws.mainTableV.mj_footer endRefreshing];
            [ws.mainTableV reloadData];
        }];
        
        return;
    }
    
    
    
    NSMutableDictionary *parmDic = [[NSMutableDictionary alloc] init];
    if (currentMonitor && [currentMonitor[@"id"] intValue] > 0){
        [parmDic setObject:TOSTRING(currentMonitor[@"id"]) forKey:@"stationId"];
    }
    [parmDic setObject:@(currentSelect) forKey:@"check_type"];
    requestHelper.needShowHud =@0;
    [requestHelper startRequest:parmDic uri:API_CHECK_LIST result:^(BResponseModel * _Nonnull respModel) {
        if (respModel.success) {
            ws.dataModel = respModel;
            ws.allMonitorArr = [[NSMutableArray alloc] initWithArray:ws.dataModel.data[@"tableList"]];
        }else{
            [SVProgressHUD showErrorWithStatus:respModel.errorMessage?respModel.errorMessage:respModel.message];
        }
        [ws.mainTableV.mj_header endRefreshing];
        [ws.mainTableV reloadData];
    }];
    
}

#pragma mark --UITableView delegate

- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath{
    if(currentSelect==2){
        return 78;
    }
//    if (indexPath.section == 0 )
//    {
//        return 88*1.5;
//    }
    return 108;
}

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{
    if (!dataModel){
           return 0;
    }
    if(currentSelect==2){
        return 1;
    }
    return 1;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{
    if(currentSelect==2){
        return [allMonitorArr count];
    }
    
    
    if (section == 0) {
//        return 1;
//    }else if (section==1){
        return [self.dataModel.data[currentSelect==2?@"list":@"mission_list"] count];
    }
    return 1;
}

- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section{
//    if(currentSelect==2){
        return 44.0f;
//    }
//    if (section == 0){
//        return .1f;
//    }else{
//        return 44.0f;
//    }
    return .1f;
}

- (CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section{
    return .1f;
}

- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section{
    
    if(currentSelect==2){
        if(dataModel)
            return checkHeadView;
        else
            return nil;
    }
    
//    if (section==0) {
//        return nil;
//    }
    
    return headView;
}


- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{
    
    if (currentSelect==2) {
        NSDictionary *check = allMonitorArr[indexPath.row];

        CheckTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"CheckTableViewCell"];
        [cell setData:check andButtonClick:^(id x) {
            if(![tableView.mj_header isRefreshing])
            {
                if([x intValue] == 0)
                {
                    NSMutableDictionary *parmDic = [[NSMutableDictionary alloc] init];
                    [parmDic setObject:check[@"id"] forKey:@"id"];
                    requestHelper.needShowHud =@1;
                    [requestHelper startRequest:parmDic uri:API_ExternalDownloadApi result:^(BResponseModel * _Nonnull respModel) {
                        if (respModel.success) {
                            //下载文件到本地。
                            [SVProgressHUD showProgress:0];
                            NSURLSessionConfiguration *configuration = [NSURLSessionConfiguration defaultSessionConfiguration];
                                
                            AFURLSessionManager *manager = [[AFURLSessionManager alloc] initWithSessionConfiguration:configuration];
                            
                            NSURL *URL = [NSURL URLWithString:API_FILE_URL([respModel.data[@"url"] stringByReplacingOccurrencesOfString:@"/u01/" withString:@""])]; //文件下载地址
                            NSURLRequest *request = [NSURLRequest requestWithURL:URL];
                            
                            NSURLSessionDownloadTask *downloadTask = [manager downloadTaskWithRequest:request progress:^(NSProgress *downloadProgress){

                                dispatch_async(dispatch_get_main_queue(), ^{
                                    [SVProgressHUD showProgress:downloadProgress.fractionCompleted];//下载进度
                                });
                             
                            } destination:^NSURL *(NSURL *targetPath, NSURLResponse *response) {

                               NSString * fileName = response.suggestedFilename; //文件名
//                                    weakSelf.fileSize = [self getFileSize:response.expectedContentLength]; //文件大小
                                NSURL *documentsDirectoryURL = [[NSFileManager defaultManager]URLForDirectory:NSDocumentDirectory inDomain:NSUserDomainMask appropriateForURL:nil create:NO error:nil];
                                NSURL *url = [documentsDirectoryURL URLByAppendingPathComponent:fileName]; //文件位置
                                return url;

                            } completionHandler:^(NSURLResponse *response, NSURL *filePath, NSError *error) {

                                NSLog(@"%@",filePath);
                                if(error)
                                    [SVProgressHUD showErrorWithStatus:[error description]];
                                else
                                {
                                    [SVProgressHUD dismiss];
                                    FileDetailViewController *vc = [[FileDetailViewController alloc] initWithURL:filePath];
                                    PUSHNAVICONTROLLER(vc);
                                }
                               //下载完成
//                                   weakSelf.filePathURL = filePath; //文件位置
                            }];
                            [downloadTask resume];
                            
                        }else{
                            [SVProgressHUD showErrorWithStatus:respModel.errorMessage?respModel.errorMessage:respModel.message];
                        }
                       
                    }];
                    
                    
                }else if([x intValue] == 1){
                    NSDictionary *check = self.dataModel.data[@"list"][indexPath.row];

                    CheckUpDeatailViewController*vc = [[CheckUpDeatailViewController alloc] initWithData:check andEdit:YES];
                    PUSHNAVICONTROLLER(vc);
                }else{
                    UIAlertController * alert = [UIAlertController alertControllerWithTitle:@"提示" message:@"确定要删除该条巡检报告吗？" preferredStyle:UIAlertControllerStyleAlert];

                    UIAlertAction * cancelAction = [UIAlertAction actionWithTitle:@"取消" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {
                        
                    }];

                    UIAlertAction * okAction = [UIAlertAction actionWithTitle:@"确定" style:UIAlertActionStyleDestructive handler:^(UIAlertAction * _Nonnull action) {
                       
                        
                        NSMutableDictionary *parmDic = [[NSMutableDictionary alloc] init];
                        [parmDic setObject:check[@"id"] forKey:@"id"];
                        
                        requestHelper.needShowHud =@1;
                        [requestHelper startRequest:parmDic uri:API_ExternalDelApi result:^(BResponseModel * _Nonnull respModel) {
                            if (respModel.success) {
                                [SVProgressHUD showSuccessWithStatus:@"删除成功"];
                                [allMonitorArr removeObjectAtIndex:indexPath.row];
                                [mainTableV deleteRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationNone];
                                
                            }else{
                               
                                [SVProgressHUD showErrorWithStatus:respModel.errorMessage?respModel.errorMessage:respModel.message];
                            }
                        
                        }];
                        
                        
                        
                    }];

                    [alert addAction:cancelAction];

                    [alert addAction:okAction];

                    [self presentViewController:alert animated:YES completion:nil];

                    
                }
            }
        }];
        
        return cell;

    }
//    if (indexPath.section == 0) {
//        CheckUpCompleteCell *cell = [tableView dequeueReusableCellWithIdentifier:@"CheckUpCompleteCell"];
//        [cell setData:self.dataModel.data];
//        return cell;
//    }else{
        NSDictionary *check = self.dataModel.data[@"mission_list"][indexPath.row];
        
        CheckWorkTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"CheckWorkTableViewCell"];
        [cell setData:check andButtonClick:^(id x) {
           
            
            if ([check[@"start_real_time"]  isEqualToString:@""]){
                NSMutableDictionary *parmDic = [[NSMutableDictionary alloc] init];

                parmDic[@"missionId"] = check[@"id"];
               
                requestHelper.needShowHud =@1;
                [requestHelper startRequest:parmDic uri:API_CHECK_START result:^(BResponseModel * _Nonnull respModel) {
                    if (respModel.success) {
                        
                        CheckUpDetailViewController *vC = [[CheckUpDetailViewController alloc] initWithCheck:check];
                        PUSHNAVICONTROLLER(vC);
                    }else{
                        
                    }
                }];
                
                
            }else{
                CheckUpDetailViewController *vC = [[CheckUpDetailViewController alloc] initWithCheck:check];
                PUSHNAVICONTROLLER(vC);
            }
            
            
        } andButton1Click:^(id x) {
            NSLog(@"1 click");
        } andButton2Click:^(id x) {
            NSLog(@"2 click");
        }];
        return cell;
//    }
            
        
//    }else{
//        MonitorDetailTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"MonitorDetailTableViewCell"];
//
//        return cell;
//    }
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath{
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
    if (currentSelect==2) {
        NSDictionary *check = allMonitorArr[indexPath.row];

        CheckUpDeatailViewController*vc = [[CheckUpDeatailViewController alloc] initWithData:check andEdit:NO];
        PUSHNAVICONTROLLER(vc);
    }
}



/*
#pragma mark - Navigation

// In a storyboard-based application, you will often want to do a little preparation before navigation
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    // Get the new view controller using [segue destinationViewController].
    // Pass the selected object to the new view controller.
}
*/

#pragma mark --CustomPicker delegate
- (void)pickerView:(CustomPicker *)v selected:(NSArray *)array andIndexPath:(NSIndexPath *)indexpath
{
    if(v.tag == 100)
    {
        currentMonitor = array[0];
        [headView setTitle:array[0][@"name"]];
        [self.mainTableV.mj_header beginRefreshing];
        return;
//        currentDate =
    }
   if(v.tag == 2)
   {
       currentDate = [NSString stringWithFormat:@"%@-%@",array[0],array[1]];
       isMannual = NO;
       [self.mainTableV.mj_header beginRefreshing];
   }else if (v.tag==1)
   {
       isMannual = NO;
       currentArea = array[0];
       currentStation = array[1];
       [self.mainTableV.mj_header beginRefreshing];
       
       
   }else if (v.tag==0)
   {
       isMannual = NO;
       currentArea = array[0];
       currentStation = nil;
       [self.mainTableV.mj_header beginRefreshing];

   }
    
}

@end
